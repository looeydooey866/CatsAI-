#ifndef DATA_H
#define DATA_H

#include "include.h"

#include <immintrin.h>

namespace Cattris {
#define pr(x,y) {(x),(y)}

    constexpr int8_t CW_KICK_DATA[2][4][5][2] = {
        { //S Z L T J
            {pr(0, 0),pr(-1, 0),pr(-1, 1),pr(0, -2),pr(-1, -2)},
            {pr(0, 0),pr(1, 0),pr(1, -1),pr(0, 2),pr(1, 2)},
            {pr(0, 0),pr(1, 0),pr(1, 1),pr(0, -2),pr(1, -2)},
            {pr(0, 0),pr(-1, 0),pr(-1, -1),pr(0, 2),pr(-1, 2)}
        },
        { //I
            {pr(0, 0),pr(-2, 0),pr(1, 0),pr(-2, -1),pr(1, 2)},
            {pr(0, 0),pr(-1, 0),pr(2, 0),pr(-1, 2),pr(2, -1)},
            {pr(0, 0),pr(2, 0),pr(-1, 0),pr(2, 1),pr(-1, -2)},
            {pr(0, 0),pr(1, 0),pr(-2, 0),pr(1, -2),pr(-2, 1)}
        }
    };

    constexpr int8_t CCW_KICK_DATA[2][4][5][2] = {
        { //S Z L T J
            {pr(0, 0),pr(1, 0),pr(1, 1),pr(0, -2),pr(1, -2)},
            {pr(0, 0),pr(1, 0),pr(1, -1),pr(0, 2),pr(1, 2)},
            {pr(0, 0),pr(-1, 0),pr(-1, 1),pr(0, -2),pr(-1, -2)},
            {pr(0, 0),pr(-1, 0),pr(-1, -1),pr(0, 2),pr(-1, 2)}
        },
        { //I
            {pr(0, 0),pr(-1, 0),pr(2, 0),pr(-1, 2),pr(2, -1)},
            {pr(0, 0),pr(2, 0),pr(-1, 0),pr(2, 1),pr(-1, -2)},
            {pr(0, 0),pr(1, 0),pr(-2, 0),pr(1, -2),pr(-2, 1)},
            {pr(0, 0),pr(-2, 0),pr(1, 0),pr(-2, -1),pr(1, 2)}
        }
    };

#define quad(a,b,c,d,e,f,g,h) {pr((a),(b)),pr((c),(d)),pr((e),(f)),pr((g),(h))}

    constexpr int8_t PIECE_COORDINATES[7][4][4][2] = {
        //I S Z O L T J
        //first coordinate is the leftmost, and bottommost point

        { //I
            quad(0, 2, 1, 2, 2, 2, 3, 2),
            quad(2, 0, 2, 1, 2, 2, 2, 3),
            quad(0, 1, 1, 1, 2, 1, 3, 1),
            quad(1, 0, 1, 1, 1, 2, 1, 3)
        },

        { //S
            quad(0, 1, 1, 1, 1, 2, 2, 2),
            quad(1, 1, 1, 2, 2, 0, 2, 1),
            quad(0, 0, 1, 0, 1, 1, 2, 1),
            quad(0, 1, 0, 2, 1, 1, 1, 0)
        },

        { //Z
            quad(0, 2, 1, 2, 1, 1, 2, 1),
            quad(1, 0, 1, 1, 2, 1, 2, 2),
            quad(0, 1, 1, 1, 1, 0, 2, 0),
            quad(0, 0, 0, 1, 1, 1, 1, 2)
        },

        { //O
            quad(1, 1, 1, 2, 2, 1, 2, 2),
            quad(1, 1, 1, 2, 2, 1, 2, 2),
            quad(1, 1, 1, 2, 2, 1, 2, 2),
            quad(1, 1, 1, 2, 2, 1, 2, 2)
        },

        { //L
            quad(0, 1, 1, 1, 2, 1, 2, 2),
            quad(1, 0, 1, 1, 1, 2, 2, 0),
            quad(0, 0, 0, 1, 1, 1, 2, 1),
            quad(0, 2, 1, 0, 1, 1, 1, 2)
        },

        { //T
            quad(0, 1, 1, 1, 1, 2, 2, 1),
            quad(1, 0, 1, 1, 1, 2, 2, 1),
            quad(0, 1, 1, 1, 2, 1, 1, 0),
            quad(0, 1, 1, 0, 1, 1, 1, 2)
        },

        { //J
            quad(0, 1, 0, 2, 1, 1, 2, 1),
            quad(1, 0, 1, 1, 1, 2, 2, 2),
            quad(0, 1, 1, 1, 2, 1, 2, 0),
            quad(0, 0, 1, 0, 1, 1, 1, 2)
        }
    };

    constexpr int8_t CENTER[7][4][2] = {
        //leftmost, bottommost point of the piece
        //I S Z O L T J

        { //I
            {0,2},{2,0},{0,1},{1,0}
        },
        { //S
            {0,1},{1,1},{0,0},{0,1}
        },
        { //Z
            {0,2},{1,0},{0,1},{0,0}
        },
        { //O
            {1,1},{1,1},{1,1},{1,1}
        },
        { //L
            {0,1},{1,0},{0,0},{0,2}
        },
        { //T
            {0,1},{1,0},{0,1},{0,1}
        },
        { //J
            {0,1},{1,0},{0,1},{0,0}
        }
    };

    constexpr int8_t CENTER_OSETS[7][4][4][2] = {
        //I S Z O L T J
        //Gives offset from leftmost bottommost piece

        { //I
            {{0, 0}, {1, 0}, {2, 0}, {3, 0}},
            {{0, 0}, {0, 1}, {0, 2}, {0, 3}},
            {{0, 0}, {1, 0}, {2, 0}, {3, 0}},
            {{0, 0}, {0, 1}, {0, 2}, {0, 3}}
        },
        { //S
            {{0, 0}, {1, 0}, {1, 1}, {2, 1}},
            {{0, 0}, {0, 1}, {1, -1}, {1, 0}},
            {{0, 0}, {1, 0}, {1, 1}, {2, 1}},
            {{0, 0}, {0, 1}, {1, 0}, {1, -1}}
        },
        { //Z
            {{0, 0}, {1, 0}, {1, -1}, {2, -1}},
            {{0, 0}, {0, 1}, {1, 1}, {1, 2}},
            {{0, 0}, {1, 0}, {1, -1}, {2, -1}},
            {{0, 0}, {0, 1}, {1, 1}, {1, 2}}
        },

        { //O
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}},
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}},
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}},
            {{0, 0}, {0, 1}, {1, 0}, {1, 1}}
        },
        { //L
            {{0, 0}, {1, 0}, {2, 0}, {2, 1}},
            {{0, 0}, {0, 1}, {0, 2}, {1, 0}},
            {{0, 0}, {0, 1}, {1, 1}, {2, 1}},
            {{0, 0}, {1, -2}, {1, -1}, {1, 0}}
        },
        { //T
            {{0, 0}, {1, 0}, {1, 1}, {2, 0}},
            {{0, 0}, {0, 1}, {0, 2}, {1, 1}},
            {{0, 0}, {1, 0}, {2, 0}, {1, -1}},
            {{0, 0}, {1, -1}, {1, 0}, {1, 1}}
        },
        { //J
            {{0, 0}, {0, 1}, {1, 0}, {2, 0}},
            {{0, 0}, {0, 1}, {0, 2}, {1, 2}},
            {{0, 0}, {1, 0}, {2, 0}, {2, -1}},
            {{0, 0}, {1, 0}, {1, 1}, {1, 2}}
        }
    };

#undef quad
#undef pr

    //I S Z O L T J
    constexpr uint8_t PieceType_SYMMETRY[7] = {2, 2, 2, 1, 4, 4, 4};
}
#endif //DATA_H
